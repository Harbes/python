## TODO 试验区，待删除
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

# Delta与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(25.0, 150.0, 2.5)
X = np.arange(0.02, 0.5, 0.02)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(Delta)
Z = vfunc(1.0,Y,100.0,0.07,X,0.3,q=0.03)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# DdeltaDvol与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 ,150.0, 2.5)
X = np.arange(10, 365, 5)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(DdeltaDvol)
Z = vfunc(Y,100.0,0.05,X/365.0,0.2,0.05)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# DvannaDvol与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(0.01 ,200.0, 2.5)
X = np.arange(10, 365, 5)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(DvannaDvol)
Z = vfunc(Y,100.0,0.07,X/365.0,0.4,0.03)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# DdeltaDtime与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 , 150.0, 2.5)
X = np.arange(25, 110, 2)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(DdeltaDtime)
Z = vfunc(-1.0,Y,100.0,0.05,X/365.0,0.3,0.05)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# Gamma与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 , 150.0, 2.5)
X = np.arange(10, 330, 3)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(Gamma)
Z = vfunc(Y,100.0,0.05,X/365.0,0.3)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(0.1 , 200.0, 2.5)
X = np.arange(10.0, 1450.0, 5.0)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(Gamma)
Z = vfunc(Y,100.0,0.05,X/365.0,0.8)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# DgammaDvol与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 , 150.0, 2.5)
X = np.arange(10, 320, 2.0)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(DgammaDvol)
Z = vfunc(Y,100.0,0.05,X/365.0,0.3,0.05)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# DgammaDspot与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 , 150.0, 2.5)
X = np.arange(50, 330, 2.5)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(DgammaDspot)
Z = vfunc(Y,100.0,0.05,X/365.0,0.3,0.05)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# DgammaDtime与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 , 150.0, 2.5)
X = np.arange(10.0, 105.0, 2.0)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(DgammaDtime)
Z = vfunc(Y,100.0,0.05,X/365.0,0.3,0.05)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# Vega与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 , 150.0, 2.5)
X = np.arange(1.0, 320.0, 2.0)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(Vega)
Z = vfunc(Y,100.0,0.05,X/365.0,0.3)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()
#Vega(55,60,0.105,0.75,0.3,q=0.0355)
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(.1 , 250.0, 5)
X = np.arange(10, 5780, 20)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(Vega)
Z = vfunc(Y,100.0,0.15,X/365.0,0.12,0.15)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# DvegaDvol与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 , 150.0, 2.0)
X = np.arange(50, 365, 2)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(DvegaDvol)
Z = vfunc(Y,100.0,0.05,X/365.0,0.2,0.05)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# DvommaDvol与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 , 150.0, 2.5)
X = np.arange(1, 320, 5)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(DvommaDvol)
Z = vfunc(Y,100.0,0.05,X/365.0,0.3)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# DvegaDtime与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(0.1 , 343.0, 2.5)
X = np.arange(50, 335, 5)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(DvegaDtime)
Z = vfunc(Y,100.0,0.05,X/365.0,0.5,0.05)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()

# Theta与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 , 150.0, 2.5)
X = np.arange(20, 330, 5)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(Theta)
Z = vfunc(-1.0,Y,100.0,0.05,X/365.0,0.3)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()
#Theta(0.0,430,405,0.07,0.0833,0.2,0.05)

# Rho与S、T的关系
figure = plt.figure()
ax = Axes3D(figure)
Y = np.arange(50.0 , 150.0, 2.5)
X = np.arange(20, 365, 5)
X, Y = np.meshgrid(X, Y)
vfunc=np.vectorize(Rho)
Z = vfunc(-1.0,Y,100.0,0.05,X/365.0,0.3)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')
plt.show()